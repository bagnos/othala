<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="it.othala.product.queries">

	<select id="listMenu" resultType="it.othala.dto.MenuDTO"
		parameterType="java.util.HashMap">


		SELECT
		a.idGender,
		a.txGender,
		b.txLibrary as imgLibrary,
		b.txName as imgName
		FROM
		${database.schema}gender a,
		${database.schema}site_images b
		where a.idLanguages = #{languages}
		and
		b.txGroupImages = 'tabNav'
		and b.pgGroupImages = a.idGender

		and exists
		(select 1 from
		${database.schema}product d,
		${database.schema}article
		e
		where
		d.idProductState = 1

		and d.idGender =
		a.idGender

		and e.idProduct =
		d.idProduct
		and
		e.qtStock
		>
		0);





	</select>

	<select id="listSubMenu" resultType="it.othala.dto.SubMenuDTO"
		parameterType="java.util.HashMap">


		SELECT idType, txType
		FROM
		${database.schema}type d
		where
		d.idLanguages = #{languages}
		and exists
		(select 1 from
		${database.schema}product a
		where
		a.idProductState = 1
		and
		a.idType =
		d.idType
		and a.idGender = #{idMenu}
		)


	</select>


	<select id="listProduct" resultType="it.othala.dto.ProductDTO"
		parameterType="java.util.HashMap">

		SELECT
		idProduct ,
		price,
		brand,
		imagesUrl,
		ceiling(price * (100 -
		coalesce(pcSconto,discount)) / 100) as
		priceDiscounted,
		description,
		gender,
		type,
		coalesce(pcSconto,discount) as discount,
		fgNewArrivals,
		tab2.idCampaign
		FROM
		(
		SELECT
		a.idProduct ,
		imPrice as price,
		txBrand as
		brand,
		txThumbnailsUrl
		as imagesUrl,
		ceiling(imPrice * (100 - pcDiscount)
		/ 100) as
		priceDiscounted,
		txDescription as description,
		txGender as
		gender,
		txType as type,
		pcDiscount as discount,

		case
		when DATEDIFF(current_date, a.dtProductState) &lt; 10
		then 'Y'
		else 'N'
		end as fgNewArrivals,

		a.idCampaign
		FROM

		${database.schema}product a,
		${database.schema}product_description
		b,
		${database.schema}brand c,
		${database.schema}gender f,
		`type` g
		where
		a.idProduct = b.idProduct
		and b.idLanguages = #{languages}
		and
		a.idProductState = 1
		and c.idBrand = a.idBrand
		and f.idGender =
		a.idGender
		and g.idType = a.idType
		and exists
		(select 1 from
		${database.schema}article
		d where
		d.idProduct =
		a.idProduct
		and
		d.qtStock >
		0)

		<if test="minPrice != null">
			and (imPrice * (100 - pcDiscount) / 100) &gt;= #{minPrice}
		</if>

		<if test="maxPrice != null">
			and (imPrice * (100 - pcDiscount) / 100) &lt;= #{maxPrice}
		</if>
		<if test="newArrivals != null and newArrivals == true">
			and DATEDIFF(current_date, a.dtProductState) &lt; 10
		</if>

		<if test="type != null">
			and a.idType = #{type}
		</if>

		<if test="gender != null">
			and a.idGender = #{gender}
		</if>

		<if test="brand != null">
			and a.idBrand = #{brand}
		</if>

		<if test="idCampaign != null">
			and a.idCampaign = #{idCampaign}
		</if>

		<if test="fgCampaign != null and fgCampaign == true">
			and a.idCampaign is not null
			and exists (select 1 from
			${database.schema}campaigns r
			where
			r.idCampaign = a.idCampaign
			and
			r.dtInizio &lt; current_date
			and r.dtFine &gt; current_date
			)
		</if>

		<if test="size != null">
			and exists (select 1 from
			${database.schema}article d
			where
			a.idProduct =
			d.idProduct
			and
			d.idSize = #{size}
			and
			d.qtStock > 0
			)
		</if>

		<if test="color != null">
			and exists (select 1 from
			${database.schema}article d
			where
			a.idProduct =
			d.idProduct
			and
			d.idColor = #{color}
			and
			d.qtStock > 0
			)
		</if>
		<if test="order != null">
			<if test="order == 1">
				order by priceDiscounted asc
			</if>
			<if test="order == 2">
				order by priceDiscounted desc
			</if>
		</if>
		) tab1
		left join
		${database.schema}campaigns tab2

		on tab1.idCampaign =
		tab2.idCampaign
		and tab2.dtInizio &lt; current_date
		and tab2.dtFine &gt;
		current_date;


	</select>

	<select id="listDistinctArticleSize" resultType="String"
		parameterType="java.util.HashMap">


		SELECT distinct(txSize) FROM ${database.schema}article
		a,
		${database.schema}size b
		where a.idSize = b.idSize
		and a.idProduct =
		#{idProduct}
		and a.qtStock > 0

	</select>


	<select id="listDistinctArticleColor" resultType="String"
		parameterType="java.util.HashMap">


		SELECT distinct(txColor) FROM ${database.schema}article
		a,
		${database.schema}color b
		where a.idColor = b.idColor
		and a.idProduct
		= #{idProduct}
		and a.qtStock > 0
		and b.idLanguages = #{languages}

	</select>


	<select id="listSize" resultType="it.othala.dto.AttributeSizeDTO">

		SELECT c.idType, idSize as
		attributo,txSize as valore
		FROM
		${database.schema}size a,
		${database.schema}type_size b,
		${database.schema}type c
		where
		a.idTypeSize = b.idTypeSize
		and a.idTypeSize = c.idTypeSize
		order by 1,2

	</select>

	<select id="listColor" resultType="it.othala.dto.AttributeDTO"
		parameterType="java.util.HashMap">

		SELECT idColor as attributo,txColor as valore
		FROM
		${database.schema}color d
		where
		idLanguages = #{languages}
		order by 2

	</select>

	<select id="listShop" resultType="it.othala.dto.ShopDTO">

		SELECT idShop, txShop, txMail
		FROM ${database.schema}shops
		order by 2;


	</select>

	<select id="listBrand" resultType="it.othala.dto.AttributeDTO"
		parameterType="java.util.HashMap">

		SELECT idBrand as attributo,txBrand as valore
		FROM
		${database.schema}brand d
		where
		idLanguages = #{languages}
		order by 2

	</select>

	<select id="listGender" resultType="it.othala.dto.AttributeDTO"
		parameterType="java.util.HashMap">

		SELECT idGender as attributo,txGender as valore
		FROM
		${database.schema}gender d
		where
		idLanguages = #{languages}
		order by 2

	</select>

	<select id="listType" resultType="it.othala.dto.AttributeDTO"
		parameterType="java.util.HashMap">

		SELECT idType as attributo,txType as valore
		FROM
		${database.schema}type d
		where
		idLanguages = #{languages}
		order by 2

	</select>


	<select id="listProductImages" resultType="String"
		parameterType="java.util.HashMap">

		SELECT txImageUrl FROM ${database.schema}product_image
		where
		idProduct = #{idProduct}

	</select>



	<select id="getProductFull" resultType="it.othala.dto.ProductFullDTO"
		parameterType="java.util.HashMap">



		SELECT
		a.idProduct as idProduct,
		a.imPrice as price,
		a.txThumbnailsUrl as thumbnailsUrl,
		a.pcDiscount as discount,
		ceiling(a.imPrice * (100 - a.pcDiscount) /
		100) as priceDiscounted,
		b.txDescription as description,

		case
		when DATEDIFF(current_date,
		a.dtProductState) &lt; 10
		then 'Y'
		else 'N'
		end as fgNewArrivals,

		a.idGender,
		txGender,
		a.idType,
		txType,
		a.idBrand,
		txBrand,
		idCampaign

		FROM
		${database.schema}product a,
		${database.schema}product_description b,

		${database.schema}gender c,
		${database.schema}type d,
		${database.schema}brand e

		where
		a.idProduct = #{idProduct}
		and
		a.idProduct = b.idProduct
		and
		b.idLanguages = #{languages}
		and a.idType =
		d.idType
		and a.idGender = c.idGender
		and a.idBrand = e.idBrand
		and
		d.idLanguages = b.idLanguages
		and c.idLanguages = b.idLanguages
		and
		e.idLanguages = b.idLanguages


	</select>




	<select id="listArticleFull" resultType="it.othala.dto.ArticleFullDTO"
		parameterType="java.util.HashMap">


		SELECT
		a.pgArticle as pgArticle,
		a.qtStock as qtStock,

		a.idSize,

		txSize,

		a.idColor,

		txColor,
		coalesce(a.txThumbnailsUrl,
		d.txThumbnailsUrl) as thumbnailsUrl,
		a.txBarCode



		FROM
		${database.schema}article a,
		${database.schema}size b,
		${database.schema}color c,
		${database.schema}product d


		where
		a.idProduct
		=
		#{idProduct}
		and a.idSize =
		b.idSize
		and c.idColor = a.idColor
		and
		c.idLanguages = #{languages}
		and
		d.idProduct = a.idProduct


	</select>


	<select id="getArticleFull" resultType="it.othala.dto.ArticleFullDTO"
		parameterType="java.util.HashMap">


		SELECT
		a.pgArticle as pgArticle,
		a.qtStock as qtStock,

		a.idSize,

		txSize,

		a.idColor,

		txColor,
		coalesce(a.txThumbnailsUrl,
		d.txThumbnailsUrl) as thumbnailsUrl,
		a.txBarCode



		FROM
		${database.schema}article a,
		${database.schema}size b,
		${database.schema}color c,
		${database.schema}product d


		where
		a.idProduct
		=
		#{idProduct}
		and
		a.pgArticle
		=
		#{pgArticle}
		and a.idSize =
		b.idSize
		and
		c.idColor =
		a.idColor
		and
		c.idLanguages = #{languages}
		and
		d.idProduct =
		a.idProduct


	</select>


	<select id="getShop" resultType="it.othala.dto.ShopDTO"
		parameterType="java.util.HashMap">


		SELECT
		a.idShop,
		a.txShop,
		a.txMail

		FROM
		${database.schema}shops a,
		${database.schema}article b



		Where b.idProduct
		= #{idProduct}
		and b.pgArticle = #{pgArticle}
		and a.idShop
		=
		b.idShop

	</select>

	<insert id="insertProduct" parameterType="it.othala.dto.ProductFullDTO">



		INSERT INTO
		${database.schema}product
		(`idGender`,
		`idType`,
		`idBrand`,
		`imPrice`,
		`pcDiscount`,
		`txThumbnailsUrl`,
		`idProductState`,
		`dtProductState`,
		`idCampaign`)

		values
		(#{idGender},#{idType},#{idBrand},
		#{price},#{discount},#{thumbnailsUrl},0,now(),#{idCampaign})

		<selectKey resultType="java.lang.Integer" keyProperty="idProduct">

			SELECT LAST_INSERT_ID() AS idProduct

		</selectKey>




	</insert>


	<insert id="insertProductDescription" parameterType="java.util.HashMap">

		INSERT INTO
		${database.schema}product_description
		(`idProduct`,`idLanguages`,`txDescription`)
		values (#{idProduct},
		#{idLanguages},#{txDescription})

	</insert>


	<insert id="insertBrand" parameterType="java.util.HashMap">

		INSERT INTO
		${database.schema}brand
		(`idLanguages`,`txBrand`)
		values (
		#{languages},#{txBrand})

	</insert>
	
		<insert id="insertColor" parameterType="java.util.HashMap">

		INSERT INTO
		${database.schema}color
		(`idLanguages`,`txColor`)
		values (
		#{languages},#{txColor})

	</insert>
	
			<insert id="insertType" parameterType="java.util.HashMap">

		INSERT INTO
		${database.schema}type
		(`idLanguages`,`txType`)
		values (
		#{languages},#{txType})

	</insert>
	

	<insert id="insertArticle" parameterType="java.util.HashMap">

		INSERT INTO
		${database.schema}article
		(`idProduct`,
		`pgArticle`,
		`idSize`,
		`idColor`,
		`qtStock`,
		`txThumbnailsUrl`,
		`idShop`,
		`txBarCode`)
		VALUES
		(#{idProduct},
		#{pgArticle},#{idSize},#{idColor},#{qtStock},#{thumbnailsUrl},#{idShop},#{txBarCode});


	</insert>


	<insert id="insertProductImage" parameterType="java.util.HashMap">

		INSERT INTO
		${database.schema}product_image
		(`idProduct`,
		`pgImage`,
		`txImageUrl`)
		VALUES
		(#{idProduct}, #{pgImage},#{txImageUrl});

	</insert>

	<select id="getQtStock" resultType="Integer" parameterType="java.util.HashMap">

		SELECT qtStock
		FROM ${database.schema}article
		Where idProduct =
		#{idProduct}
		and pgArticle = #{pgArticle};


	</select>

	<select id="getQtStockLock" resultType="Integer" parameterType="java.util.HashMap">

		SELECT qtStock
		FROM ${database.schema}article
		Where idProduct =
		#{idProduct}
		and pgArticle = #{pgArticle}
		FOR UPDATE;


	</select>

	<update id="updateQtStock" parameterType="java.util.HashMap">

		UPDATE
		${database.schema}article
		<if test="fgVendita == true">
			set qtStock = qtStock - #{qtArticles}
		</if>
		<if test="fgVendita == false">
			set qtStock = qtStock + #{qtArticles}
		</if>
		Where idProduct =
		#{idProduct}
		and
		pgArticle = #{pgArticle};


	</update>

	<select id="listProductToPublish" resultType="it.othala.dto.ProductDTO">

		SELECT
		a.idProduct ,
		imPrice as price,
		txBrand as brand,
		txThumbnailsUrl
		as imagesUrl,
		ceiling(imPrice * (100 - pcDiscount) / 100) as
		priceDiscounted,
		txDescription as description,
		txGender as gender,
		txType as type,
		pcDiscount as discount,
		case
		when a.dtProductState
		>
		current_date - 7 then
		'Y'
		else 'N'
		end as fgNewArrivals
		FROM

		${database.schema}product a,
		${database.schema}product_description b,
		${database.schema}brand c,
		${database.schema}gender f,
		`type` g
		where
		a.idProduct = b.idProduct
		and
		b.idLanguages = 'it'
		and
		a.idProductState = 0
		and c.idBrand = a.idBrand
		and f.idGender =
		a.idGender
		and g.idType = a.idType;


	</select>

	<select id="getListCampaign" resultType="it.othala.dto.CampaignDTO">


		SELECT * FROM
		${database.schema}campaigns
		where dtInizio &lt; current_date
		and dtFine
		&gt; current_date;



	</select>


	<update id="publishProduct" parameterType="list">

		UPDATE
		${database.schema}product

		set idProductState = 1

		Where idProduct
		in


		<foreach item="item" index="index" collection="list" open="("
			separator="," close=")">
			#{item}
		</foreach>

	</update>

	<insert id="insertCampaign" parameterType="it.othala.dto.CampaignDTO">



		INSERT INTO
		${database.schema}campaigns
		(`txCampaign`,
		`dtInizio`,
		`dtFine`,
		`pcSconto`)

		values
		(#{txCampaign},#{dtInizio},#{dtFine},
		#{pcSconto})

		<selectKey resultType="java.lang.Integer" keyProperty="idCampaign">

			SELECT LAST_INSERT_ID() AS idCampaign

		</selectKey>



	</insert>


	<update id="addProductToCampaign" parameterType="java.util.HashMap">


		UPDATE
		${database.schema}product

		set idCampaign = #{idCampaign}

		Where
		idProduct
		in


		<foreach item="item" index="index" collection="listIdProduct"
			open="(" separator="," close=")">
			#{item}
		</foreach>


	</update>




</mapper>