<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="it.othala.product.queries">

	<select id="listMenu" resultType="it.othala.dto.MenuDTO"
		parameterType="java.util.HashMap">


		SELECT
		a.idGender,
		a.txGender,
		b.txLibrary as imgLibrary,
		b.txName as imgName
		FROM
		${database.schema}gender a,
		${database.schema}site_images b
		where a.idLanguages = #{languages}
		and
		b.txGroupImages = 'tabNav'
		and b.pgGroupImages = a.idGender

		and exists
		(select 1 from
		${database.schema}product d,
		${database.schema}article
		e
		where
		d.idProductState = 1

		and d.idGender =
		a.idGender

		and e.idProduct =
		d.idProduct
		and
		e.qtStock
		>
		0);





	</select>

	<select id="listSubMenu" resultType="it.othala.dto.SubMenuDTO"
		parameterType="java.util.HashMap">


		SELECT idType, txType
		FROM
		${database.schema}type d
		where
		d.idLanguages = #{languages}
		and exists
		(select 1 from
		${database.schema}product a
		where
		a.idProductState = 1
		and
		a.idType =
		d.idType
		and a.idGender = #{idMenu}
		)


	</select>


	<select id="listProduct" resultType="it.othala.dto.ProductFullNewDTO"
		parameterType="java.util.HashMap">

		SELECT
		idProduct ,
		price,
		txBrand,
		thumbnailsUrl,
		coalesce(specialPrice,
		ceiling(price * (100 -
		coalesce(pcSconto,discount)) / 100)) as
		priceDiscounted,
		description,
		gender,
		type,
		coalesce(pcSconto,discount) as
		discount,
		fgNewArrivals,
		tab2.idCampaign,
		specialPrice
		FROM
		(
		SELECT
		a.idProduct ,
		imPrice as price,
		txBrand,
		txThumbnailsUrl
		as
		thumbnailsUrl,
		txDescription as description,
		txGender as
		gender,
		txType as
		type,
		pcDiscount as discount,

		case
		when
		DATEDIFF(current_date,
		a.dtProductState) &lt; 10
		then 'Y'
		else 'N'
		end as
		fgNewArrivals,

		a.idCampaign,
		a.specialPrice
		FROM

		${database.schema}product a,
		${database.schema}product_description
		b,
		${database.schema}brand c,
		${database.schema}gender f,
		`type` g
		where
		a.idProduct = b.idProduct
		and
		b.idLanguages = #{languages}
		and
		b.idLanguages = f.idLanguages
		and
		b.idLanguages = g.idLanguages
		and
		a.idProductState = 1
		and c.idBrand =
		a.idBrand
		and f.idGender =
		a.idGender
		and g.idType = a.idType
		and exists
		(select 1 from
		${database.schema}article
		d where
		d.idProduct =
		a.idProduct
		and
		d.qtStock >
		0)


		<if test="newArrivals != null and newArrivals == true">
			and DATEDIFF(current_date, a.dtProductState) &lt; 10
		</if>

		<if test="type != null">
			and a.idType = #{type}
		</if>

		<if test="gender != null">
			and a.idGender = #{gender}
		</if>

		<if test="brand != null">
			and a.idBrand = #{brand}
		</if>

		<if test="idCampaign != null">
			and a.idCampaign = #{idCampaign}
		</if>

		<if test="fgCampaign != null and fgCampaign == true">
			and a.idCampaign is not null
			and exists (select 1 from
			${database.schema}campaigns r
			where
			r.idCampaign = a.idCampaign
			and
			r.dtInizio &lt; current_date
			and r.dtFine &gt; current_date
			)
		</if>

		<if test="size != null">
			and exists (select 1 from
			${database.schema}article d
			where
			a.idProduct =
			d.idProduct
			and
			d.idSize = #{size}
			and
			d.qtStock > 0
			)
		</if>

		<if test="color != null">
			and exists (select 1 from
			${database.schema}article d
			where
			a.idProduct =
			d.idProduct
			and
			d.idColor = #{color}
			and
			d.qtStock > 0
			)
		</if>

		) tab1
		left join
		${database.schema}campaigns tab2

		on tab1.idCampaign =
		tab2.idCampaign
		and tab2.dtInizio &lt;= current_date
		and tab2.dtFine
		&gt;=
		current_date
		<if test="minPrice != null">
			and coalesce(specialPrice,
			ceiling(price * (100 -
			coalesce(pcSconto,discount)) / 100)) &gt;= #{minPrice}
		</if>

		<if test="maxPrice != null">
			and coalesce(specialPrice,
			ceiling(price * (100 -
			coalesce(pcSconto,discount)) / 100)) &lt;= #{maxPrice}
		</if>

		<if test="order != null">
			<if test="order == 1">
				order by priceDiscounted asc
			</if>
			<if test="order == 2">
				order by priceDiscounted desc
			</if>
		</if>
		;


	</select>

	<select id="listDistinctArticleSize" resultType="String"
		parameterType="java.util.HashMap">


		SELECT distinct(txSize) FROM ${database.schema}article
		a,
		${database.schema}size b
		where a.idSize = b.idSize
		and a.idProduct =
		#{idProduct}
		and a.qtStock > 0

	</select>


	<select id="listDistinctArticleColor" resultType="String"
		parameterType="java.util.HashMap">


		SELECT distinct(txColor) FROM ${database.schema}article
		a,
		${database.schema}color b
		where a.idColor = b.idColor
		and a.idProduct
		= #{idProduct}
		and a.qtStock > 0
		and b.idLanguages = #{languages}

	</select>


	<select id="listSize" resultType="it.othala.dto.AttributeSizeDTO">

		SELECT c.idType, idSize as
		attributo,txSize as valore
		FROM
		${database.schema}size a,
		${database.schema}type_size b,
		${database.schema}type c
		where
		a.idTypeSize = b.idTypeSize
		and a.idTypeSize = c.idTypeSize
		order by 1,2

	</select>

	<select id="listColor" resultType="it.othala.dto.AttributeDTO"
		parameterType="java.util.HashMap">

		SELECT idColor as attributo,txColor as valore
		FROM
		${database.schema}color d
		where
		idLanguages = #{languages}
		order by 2

	</select>

	<select id="listMaterial" resultType="it.othala.dto.AttributeDTO"
		parameterType="java.util.HashMap">

		SELECT idMaterial as attributo,txMaterial as valore
		FROM
		${database.schema}material d
		where
		idLanguages = #{languages}
		order by 2

	</select>

	<select id="listStatesOrder" resultType="it.othala.dto.AttributeDTO">

		SELECT idStato as
		attributo,txStato as valore
		FROM
		${database.schema}states d
		order by 2

	</select>

	<select id="listStatesProduct" resultType="it.othala.dto.AttributeDTO">

		SELECT idProductState
		as
		attributo,txProductState as valore
		FROM
		${database.schema}product_state d
		order by 2

	</select>



	<select id="listShop" resultType="it.othala.dto.ShopDTO">

		SELECT idShop, txShop, txMail
		FROM ${database.schema}shops
		order by 1;


	</select>

	<select id="listBrand" resultType="it.othala.dto.AttributeDTO">

		SELECT idBrand as
		attributo,txBrand as valore
		FROM
		${database.schema}brand d
		order by 2

	</select>

	<select id="listGender" resultType="it.othala.dto.AttributeDTO"
		parameterType="java.util.HashMap">

		SELECT idGender as attributo,txGender as valore
		FROM
		${database.schema}gender d
		where
		idLanguages = #{languages}
		order by 2

	</select>

	<select id="listType" resultType="it.othala.dto.AttributeDTO"
		parameterType="java.util.HashMap">

		SELECT idType as attributo,txType as valore
		FROM
		${database.schema}type d
		where
		idLanguages = #{languages}
		order by 2

	</select>

	<select id="listProductImages" resultType="String"
		parameterType="java.util.HashMap">

		SELECT txImageUrl FROM ${database.schema}product_image
		where
		idProduct = #{idProduct}

	</select>

	<select id="getProductFull" resultType="it.othala.dto.ProductFullNewDTO"
		parameterType="java.util.HashMap">



		SELECT

		tab1.idProduct,
		tab1.price,
		tab1.thumbnailsUrl,
		tab1.discount,

		coalesce(specialPrice,
		ceiling(tab1.price * (100 -
		coalesce(tab2.pcSconto,tab1.discount)) /
		100)) as
		priceDiscounted,

		tab1.description,
		tab1.fgNewArrivals,
		tab1.idGender,
		tab1.txGender,
		tab1.idType,
		tab1.txType,
		tab1.idBrand,
		tab1.txBrand,
		tab1.idCampaign,
		tab1.idMaterial,
		tab1.txMaterial,
		tab1.specialPrice



		FROM

		(
		SELECT
		a.idProduct as idProduct,
		a.imPrice as price,
		a.txThumbnailsUrl as
		thumbnailsUrl,
		a.pcDiscount as discount,

		b.txDescription as description,

		case
		when DATEDIFF(current_date,
		a.dtProductState) &lt; 10
		then 'Y'
		else
		'N'
		end as fgNewArrivals,

		a.idGender,
		txGender,
		a.idType,
		txType,
		a.idBrand,
		txBrand,
		idCampaign,
		a.idMaterial,
		txMaterial,
		specialPrice

		FROM
		${database.schema}product a,
		${database.schema}product_description b,

		${database.schema}gender c,
		${database.schema}type d,
		${database.schema}brand e,
		${database.schema}material f

		where
		a.idProduct = #{idProduct}
		and
		a.idProduct = b.idProduct
		and
		b.idLanguages = #{languages}
		and a.idType =
		d.idType
		and a.idGender =
		c.idGender
		and a.idBrand = e.idBrand
		and
		f.idMaterial = a.idMaterial
		and
		d.idLanguages = b.idLanguages
		and
		c.idLanguages = b.idLanguages
		and
		f.idLanguages = b.idLanguages
		) tab1
		left join
		${database.schema}campaigns tab2

		on tab1.idCampaign =
		tab2.idCampaign
		and tab2.dtInizio &lt;= current_date
		and tab2.dtFine
		&gt;=
		current_date;

	</select>

	<select id="listArticleFull" resultType="it.othala.dto.ArticleFullDTO"
		parameterType="java.util.HashMap">


		SELECT
		a.pgArticle as pgArticle,
		a.qtStock as qtStock,

		a.idSize,

		txSize,

		a.idColor,

		txColor,
		coalesce(a.txThumbnailsUrl,
		d.txThumbnailsUrl) as thumbnailsUrl,
		a.txBarCode



		FROM
		${database.schema}article a,
		${database.schema}size b,
		${database.schema}color c,
		${database.schema}product d


		where
		a.idProduct
		=
		#{idProduct}
		and a.idSize =
		b.idSize
		and c.idColor = a.idColor
		and
		c.idLanguages = #{languages}
		and
		d.idProduct = a.idProduct


	</select>

	<select id="getArticleFull" resultType="it.othala.dto.ArticleFullDTO"
		parameterType="java.util.HashMap">


		SELECT
		a.pgArticle as pgArticle,
		a.qtStock as qtStock,

		a.idSize,

		txSize,

		a.idColor,

		txColor,
		coalesce(a.txThumbnailsUrl,
		d.txThumbnailsUrl) as thumbnailsUrl,
		a.txBarCode



		FROM
		${database.schema}article a,
		${database.schema}size b,
		${database.schema}color c,
		${database.schema}product d


		where
		a.idProduct
		=
		#{idProduct}
		and
		a.pgArticle
		=
		#{pgArticle}
		and a.idSize =
		b.idSize
		and
		c.idColor =
		a.idColor
		and
		c.idLanguages = #{languages}
		and
		d.idProduct =
		a.idProduct


	</select>

	<select id="getArticleFullBarcode" resultType="it.othala.dto.ArticleFullDTO"
		parameterType="java.util.HashMap">


		SELECT
		a.pgArticle as pgArticle,
		a.qtStock as qtStock,

		a.idSize,

		txSize,

		a.idColor,

		txColor,
		coalesce(a.txThumbnailsUrl,
		d.txThumbnailsUrl) as thumbnailsUrl,
		a.txBarCode



		FROM
		${database.schema}article a,
		${database.schema}size b,
		${database.schema}color c,
		${database.schema}product d


		where
		a.txBarcode
		=
		#{txBarcode}
		and a.idSize =
		b.idSize
		and
		c.idColor =
		a.idColor
		and
		c.idLanguages = #{languages}
		and
		d.idProduct =
		a.idProduct


	</select>

	<select id="getShop" resultType="it.othala.dto.ShopDTO"
		parameterType="java.util.HashMap">


		SELECT
		a.idShop,
		a.txShop,
		a.txMail

		FROM
		${database.schema}shops a,
		${database.schema}article b



		Where b.idProduct
		= #{idProduct}
		and b.pgArticle = #{pgArticle}
		and a.idShop
		=
		b.idShop

	</select>

	<insert id="insertProduct" parameterType="it.othala.dto.ProductFullNewDTO">



		INSERT INTO
		${database.schema}product
		(`idGender`,
		`idType`,
		`idBrand`,
		`imPrice`,
		`pcDiscount`,
		`txThumbnailsUrl`,
		`idProductState`,
		`dtProductState`,
		`idCampaign`,
		`idMaterial`,
		`specialPrice`)

		values
		(#{idGender},#{idType},#{idBrand},
		#{price},#{discount},#{thumbnailsUrl},0,now(),#{idCampaign},#{idMaterial},#{specialPrice})

		<selectKey resultType="java.lang.Integer" keyProperty="idProduct">

			SELECT LAST_INSERT_ID() AS idProduct

		</selectKey>




	</insert>

	<insert id="insertProductDescription" parameterType="java.util.HashMap">

		INSERT INTO
		${database.schema}product_description
		(`idProduct`,`idLanguages`,`txDescription`)
		values (#{idProduct},
		#{idLanguages},#{txDescription})

	</insert>

	<insert id="insertBrand" parameterType="java.util.HashMap">

		INSERT INTO
		${database.schema}brand
		(`txBrand`)
		values (#{txBrand})

	</insert>

	<insert id="insertColor" parameterType="java.util.HashMap">

		INSERT INTO
		${database.schema}color
		(`idColor`,`idLanguages`,`txColor`)
		values (
		#{idColor},#{languages},#{txColor})

	</insert>

	<insert id="insertMaterial" parameterType="java.util.HashMap">

		INSERT INTO
		${database.schema}material
		(`idMaterial`,`idLanguages`,`txMaterial`)
		values (
		#{idMaterial},#{languages},#{txMaterial})

	</insert>

	<insert id="insertType" parameterType="java.util.HashMap">

		INSERT INTO
		${database.schema}type
		(`idLanguages`,`txType`)
		values (
		#{languages},#{txType})

	</insert>

	<insert id="insertArticle" parameterType="java.util.HashMap">

		INSERT INTO
		${database.schema}article
		(`idProduct`,
		`pgArticle`,
		`idSize`,
		`idColor`,
		`qtStock`,
		`txThumbnailsUrl`,
		`idShop`,
		`txBarCode`)
		VALUES
		(#{idProduct},
		#{pgArticle},#{idSize},#{idColor},#{qtStock},#{thumbnailsUrl},#{idShop},#{txBarCode});


	</insert>

	<insert id="insertProductImage" parameterType="java.util.HashMap">

		INSERT INTO
		${database.schema}product_image
		(`idProduct`,
		`pgImage`,
		`txImageUrl`)
		VALUES
		(#{idProduct}, #{pgImage},#{txImageUrl});

	</insert>

	<select id="getQtStock" resultType="Integer" parameterType="java.util.HashMap">

		SELECT qtStock
		FROM ${database.schema}article
		Where idProduct =
		#{idProduct}
		and pgArticle = #{pgArticle};


	</select>

	<select id="getMaxIdColor" resultType="Integer">

		SELECT MAX(idColor)
		FROM
		${database.schema}color;


	</select>

	<select id="getDescrizione" resultType="String">

		SELECT CONCAT(txBrand, '
		', txType, ' ', txGender, ' ',txMaterial)
		as txDescrizione FROM
		${database.schema}`brand` a,
		${database.schema}`type` b,
		${database.schema}`material` c,
		${database.schema}`gender` d
		where
		a.idBrand = #{idBrand}
		and b.idType = #{idType}
		and c.idMaterial =
		#{idMaterial}
		and d.idGender = #{idGender}
		and b.idLanguages =
		#{languages}
		and c.idLanguages = b.idLanguages
		and d.idLanguages =
		b.idLanguages;


	</select>

	<select id="getMaxIdMaterial" resultType="Integer">

		SELECT MAX(idMaterial)
		FROM ${database.schema}material;


	</select>

	<select id="getQtStockLock" resultType="Integer" parameterType="java.util.HashMap">

		SELECT qtStock
		FROM ${database.schema}article
		Where idProduct =
		#{idProduct}
		and pgArticle = #{pgArticle}
		FOR UPDATE;


	</select>

	<update id="downloadArticle" parameterType="java.util.HashMap">

		UPDATE
		${database.schema}article
		set qtStock = qtStock - 1
		Where txBarcode =
		#{txBarcode};


	</update>

	<update id="updateQtStock" parameterType="java.util.HashMap">

		UPDATE
		${database.schema}article
		<if test="fgVendita == true">
			set qtStock = qtStock - #{qtArticles}
		</if>
		<if test="fgVendita == false">
			set qtStock = qtStock + #{qtArticles}
		</if>
		Where idProduct =
		#{idProduct}
		and
		pgArticle = #{pgArticle};


	</update>

	<select id="getListCampaign" resultType="it.othala.dto.CampaignDTO">


		SELECT * FROM
		${database.schema}campaigns
		where dtInizio &lt; current_date
		and dtFine
		&gt; current_date;



	</select>
	
		<select id="getListNazioni" resultType="it.othala.dto.NazioniDTO">


		SELECT idNazione as descrizione,
		idLanguages as language 
		FROM
		${database.schema}nazioni
		ORDER BY 1;



	</select>
	
	

	<update id="publishProduct" parameterType="list">

		UPDATE
		${database.schema}product

		set idProductState = 1

		Where idProduct
		in


		<foreach item="item" index="index" collection="list" open="("
			separator="," close=")">
			#{item}
		</foreach>

	</update>

	<insert id="insertCampaign" parameterType="it.othala.dto.CampaignDTO">



		INSERT INTO
		${database.schema}campaigns
		(`txCampaign`,
		`dtInizio`,
		`dtFine`,
		`pcSconto`)

		values
		(#{txCampaign},#{dtInizio},#{dtFine},
		#{pcSconto})

		<selectKey resultType="java.lang.Integer" keyProperty="idCampaign">

			SELECT LAST_INSERT_ID() AS idCampaign

		</selectKey>



	</insert>

	<update id="addProductToCampaign" parameterType="java.util.HashMap">


		UPDATE
		${database.schema}product

		set idCampaign = #{idCampaign}

		Where
		idProduct
		in


		<foreach item="item" index="index" collection="listIdProduct"
			open="(" separator="," close=")">
			#{item}
		</foreach>


	</update>

	<select id="listFindProduct" resultType="it.othala.dto.ProductFullNewDTO"
		parameterType="java.util.HashMap">

		SELECT
		idProduct,
		idProductState,
		txProductState,
		idGender,
		txGender,
		idType,
		txType,
		idBrand,
		txBrand,
		imPrice as price,
		coalesce(specialPrice,
		ceiling(imPrice * (100 -
		coalesce(pcSconto,pcDiscount)) / 100)) as
		priceDiscounted,

		description,
		dtProductState,
		thumbnailsUrl,
		specialPrice

		FROM
		(
		SELECT
		a.idProduct ,
		a.idProductState,
		h.txProductState as txProductState,
		a.idGender,
		txGender,
		a.idType,
		txType,
		a.idBrand,
		txBrand,
		imPrice,
		pcDiscount,
		txDescription as
		description,
		a.dtProductState,
		txThumbnailsUrl as
		thumbnailsUrl,
		idCampaign,
		specialPrice

		FROM

		${database.schema}product a,
		${database.schema}product_description b,
		${database.schema}brand c,
		${database.schema}gender f,
		${database.schema}`type` g,
		${database.schema}product_state h
		where
		a.idProduct
		= b.idProduct
		and
		b.idLanguages = "it"
		and b.idLanguages
		= f.idLanguages
		and b.idLanguages
		= g.idLanguages
		and c.idBrand =
		a.idBrand
		and
		f.idGender =
		a.idGender
		and
		g.idType = a.idType
		and
		h.idProductState =
		a.idProductState

		<if test="txBarcode != null">
			and exists (select 1 from
			${database.schema}article u
			where
			u.idProduct =
			a.idProduct
			and
			u.txBarcode = #{txBarcode}
			)

		</if>

		<if test="state != null">
			and a.idProductState = #{state}
		</if>

		<if test="state == null">
			and a.idProductState in (0,1)
		</if>

		<if test="gender != null">
			and a.idGender = #{gender}
		</if>

		<if test="type != null">
			and a.idType = #{type}
		</if>

		<if test="brand != null">
			and a.idBrand = #{brand}
		</if>

		<if test="description != null">
			and b.txDescription like CONCAT('%', #{description},'%')
		</if>

		<if test="dtBegin != null">
			and a.dtProductState &gt;= #{dtBegin}
		</if>

		<if test="minPrice != null">
			and a.imPrice &gt;= #{minPrice}
		</if>

		<if test="maxPrice != null">
			and a.imPrice &lt;= #{maxPrice}
		</if>

		<if test="dtEnd != null">
			and a.dtProductState &gt;= #{dtEnd}
		</if>



		<if test="shop != null">
			and exists (select 1 from
			${database.schema}article r
			where
			r.idProduct = a.idProduct
			and
			r.idShop = #{shop}
			)
		</if>



		) tab1

		left join

		campaigns tab2

		on tab1.idCampaign = tab2.idCampaign
		and
		tab2.dtInizio &lt;= current_date
		and tab2.dtFine &gt;= current_date


	</select>

	<update id="deleteProduct" parameterType="java.util.HashMap">


		UPDATE
		${database.schema}product
		SET
		idProductState = 2,
		dtProductState =
		current_date
		WHERE idProduct
		= #{idProduct};


	</update>

	<select id="listDistinctTxBarcode" resultType="String"
		parameterType="java.util.HashMap">

		SELECT distinct(txBarcode) FROM
		${database.schema}article
		a
		where a.idProduct
		= #{idProduct}


	</select>

	<select id="listDistinctShop" resultType="it.othala.dto.ShopDTO"
		parameterType="java.util.HashMap">


		SELECT b.idShop, b.txShop, b.txMail FROM
		${database.schema}article
		a,
		${database.schema}shops b
		where a.idShop =
		b.idShop
		and a.idProduct
		= #{idProduct}
		group by 1,2,3


	</select>

	<update id="updateProduct" parameterType="it.othala.dto.ProductFullNewDTO">

		UPDATE
		${database.schema}product
		SET
		`idGender` = #{idGender},
		`idType` =
		#{idType},
		`idBrand` = #{idBrand},
		`imPrice` = #{price},
		`pcDiscount` =
		#{discount},
		`txThumbnailsUrl` = #{thumbnailsUrl},
		`idCampaign` =
		#{idCampaign},
		`idMaterial` = #{idMaterial},
		`specialPrice` =
		#{specialPrice}
		WHERE idProduct
		=
		#{idProduct}


	</update>

	<delete id="deleteProductDescription" parameterType="java.util.HashMap">

		DELETE FROM
		${database.schema}product_description
		WHERE idProduct
		= #{idProduct}

	</delete>

	<delete id="deleteArticle" parameterType="java.util.HashMap">

		DELETE FROM
		${database.schema}article
		WHERE idProduct
		= #{idProduct}

	</delete>

	<delete id="deleteProductImage" parameterType="java.util.HashMap">
		DELETE FROM
		${database.schema}product_image
		WHERE idProduct
		= #{idProduct}
	</delete>

	<select id="listArticleFullBarcode" resultType="it.othala.dto.ArticleFullDTO"
		parameterType="java.util.HashMap">


		SELECT
		a.pgArticle as pgArticle,
		a.qtStock as qtStock,

		a.idSize,

		txSize,

		a.idColor,

		txColor,
		coalesce(a.txThumbnailsUrl,
		d.txThumbnailsUrl) as thumbnailsUrl,
		a.txBarCode



		FROM
		${database.schema}article a,
		${database.schema}size b,
		${database.schema}color c,
		${database.schema}product d


		where
		a.idProduct
		=
		#{idProduct}
		and a.txBarCode
		=
		#{txBarcode}
		and a.idSize =
		b.idSize
		and
		c.idColor = a.idColor
		and
		c.idLanguages = "it"
		and
		d.idProduct =
		a.idProduct


	</select>

	<select id="getProductFullBarcode" resultType="it.othala.dto.ProductFullNewDTO"
		parameterType="java.util.HashMap">

		SELECT

		tab1.idProduct,
		tab1.price,
		tab1.thumbnailsUrl,
		tab1.discount,

		coalesce(specialPrice,
		ceiling(tab1.price * (100 -
		coalesce(tab2.pcSconto,tab1.discount)) /
		100)) as
		priceDiscounted,

		tab1.description,
		tab1.fgNewArrivals,
		tab1.idGender,
		tab1.txGender,
		tab1.idType,
		tab1.txType,
		tab1.idBrand,
		tab1.txBrand,
		tab1.idCampaign,
		tab1.idMaterial,
		tab1.txMaterial,
		tab1.specialPrice



		FROM

		(


		SELECT
		a.idProduct as idProduct,
		a.imPrice as price,
		a.txThumbnailsUrl as
		thumbnailsUrl,
		a.pcDiscount as discount,
		ceiling(a.imPrice * (100 -
		a.pcDiscount) /
		100) as priceDiscounted,
		b.txDescription as description,

		case
		when DATEDIFF(current_date,
		a.dtProductState) &lt; 10
		then 'Y'
		else
		'N'
		end as fgNewArrivals,

		a.idGender,
		txGender,
		a.idType,
		txType,
		a.idBrand,
		txBrand,
		idCampaign,
		a.idMaterial,
		f.txMaterial,
		specialPrice

		FROM
		${database.schema}product a,
		${database.schema}product_description
		b,

		${database.schema}gender c,
		${database.schema}type d,
		${database.schema}brand e,
		${database.schema}material f,
		${database.schema}article g
		where
		a.idProduct = b.idProduct
		and
		a.idProduct = g.idProduct
		and g.txBarCode = #{txBarcode}
		and
		b.idLanguages = "it"
		and a.idType =
		d.idType
		and a.idGender = c.idGender
		and a.idBrand = e.idBrand
		and
		f.idMaterial = a.idMaterial
		and
		d.idLanguages = b.idLanguages
		and
		c.idLanguages = b.idLanguages
		and
		f.idLanguages = b.idLanguages
		) tab1
		left join
		${database.schema}campaigns tab2

		on tab1.idCampaign =
		tab2.idCampaign
		and tab2.dtInizio &lt;= current_date
		and tab2.dtFine
		&gt;=
		current_date;


	</select>

	<select id="countNewArrivals" resultType="integer">

		SELECT
		count(*)
		FROM

		${database.schema}product a
		where
		a.idProductState = 1
		and exists
		(select
		1 from
		${database.schema}article
		d where
		d.idProduct =
		a.idProduct
		and
		d.qtStock >
		0)
		and DATEDIFF(current_date, a.dtProductState) &lt; 10
		;


	</select>

	<select id="countSpecialPrice" resultType="integer">

		SELECT
		count(*)
		FROM

		${database.schema}product a
		where
		a.idProductState = 1
		and exists
		(select
		1 from
		${database.schema}article
		d where
		d.idProduct =
		a.idProduct
		and
		d.qtStock >
		0)
		and a.specialPrice is not null
		;


	</select>

	<select id="countPromozioni" resultType="integer">

		SELECT
		count(*)
		FROM

		campaigns tab2

		where
		tab2.dtInizio
		&lt;= current_date
		and tab2.dtFine &gt;= current_date
		;


	</select>


</mapper>